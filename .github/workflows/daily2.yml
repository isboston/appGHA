name: Hourly Build Report

on:
  schedule:
    - cron: "0 */5 * * *"  # –ó–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —á–∞—Å
  workflow_dispatch:  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é

jobs:
  check-build-results:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π 1 —á–∞—Å
        run: |
          echo "üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π 1 —á–∞—Å..."
          CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          ONE_HOUR_AGO=$(date -u -d "1 hour ago" +"%Y-%m-%dT%H:%M:%SZ")

          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | \
            jq --arg since "$ONE_HOUR_AGO" --arg now "$CURRENT_TIME" \
            '.artifacts | map(select(.created_at >= $since and .created_at <= $now)) | .[].name' > artifacts_list.txt

          echo "üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"
          cat artifacts_list.txt || echo "‚ùå –ù–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å!"

      - name: ‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        run: |
          mkdir -p artifacts
          touch downloaded_artifacts.txt

          while read ARTIFACT_NAME; do
            ARTIFACT_NAME=$(echo "$ARTIFACT_NAME" | tr -d '"')

            if [ -n "$ARTIFACT_NAME" ] && ! grep -Fxq "$ARTIFACT_NAME" downloaded_artifacts.txt; then
              echo "$ARTIFACT_NAME" >> downloaded_artifacts.txt
              echo "‚¨áÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å $ARTIFACT_NAME..."

              # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥, –ø–æ–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º
              for i in {1..6}; do
                gh run download --repo ${{ github.repository }} -n "$ARTIFACT_NAME" -D "artifacts/$ARTIFACT_NAME" && break
                echo "‚è≥ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç $ARTIFACT_NAME –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫..."
                sleep 10
              done || echo "‚ùå –û—à–∏–±–∫–∞: –ê—Ä—Ç–µ—Ñ–∞–∫—Ç $ARTIFACT_NAME —Ç–∞–∫ –∏ –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω."
            fi
          done < artifacts_list.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∞—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        run: |
          ls -lah artifacts || echo "‚ùå –ù–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤!"
          find artifacts -type f || echo "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤!"

      - name: üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–∞—á–∞–Ω–Ω—ã—Ö `build_results.json`
        run: |
          echo "üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ build_results.json:"
          find artifacts -name "build_results.json" | while read file; do
            echo "üîç –§–∞–π–ª: $file"
            cat "$file"
            echo "----------------"
          done

      - name: üìÇ –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ build_results.json –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
        run: |
          echo "[]" > merged_results.json
          find artifacts -name "build_results.json" | while read file; do
            echo "üìÅ –î–æ–±–∞–≤–ª—è–µ–º $file –≤ merged_results.json"
            jq -s 'add' merged_results.json "$file" > tmp.json && mv tmp.json merged_results.json
          done

          echo "üìÑ –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ merged_results.json:"
          cat merged_results.json

      - name: üîÑ **–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–∞—Ç—É—Å—ã**
        run: |
          jq 'map(if .status == "" then .status = "failure" else . end)' merged_results.json > tmp.json && mv tmp.json merged_results.json
          echo "üìÑ –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
          cat merged_results.json

      - name: üìÇ **–ü—Ä–æ–≤–µ—Ä—è–µ–º `build_failures.log` –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏**
        run: |
          if [ -f artifacts/build_failures/build_failures.log ]; then
            FAIL_COUNT=$(cat artifacts/build_failures/build_failures.log | wc -l)
            for ((i=1; i<=FAIL_COUNT; i++)); do
              jq '. += [{"date": "'"$(date -u +"%Y-%m-%d")"'", "status": "failure"}]' merged_results.json > tmp.json && mv tmp.json merged_results.json
            done
          fi
          echo "üìÑ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è `build_failures.log`:"
          cat merged_results.json

      - name: üì¢ **–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Telegram**
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ ! -s merged_results.json ]; then
            echo "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–±–æ—Ä–∫–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å. –í—ã—Ö–æ–¥."
            exit 0
          fi

          echo "üìÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º merged_results.json:"
          jq . merged_results.json

          FAILURES=$(jq '[.[] | select(.status=="failure" or .status=="failed" or .status=="error")] | length' merged_results.json)
          TOTAL=$(jq 'length' merged_results.json)

          MESSAGE="üïí *–û—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å*\n"
          MESSAGE+="üìä –í—Å–µ–≥–æ —Å–±–æ—Ä–æ–∫: *$TOTAL*\n"
          if [ "$FAILURES" -eq 0 ]; then
            MESSAGE+="‚úÖ *–í—Å–µ —Å–±–æ—Ä–∫–∏ —É—Å–ø–µ—à–Ω—ã!* üéâ\n"
          else
            MESSAGE+="‚ùå *–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–±–æ—Ä–∫–∏: $FAILURES*\n"
          fi
          MESSAGE+="üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ Actions](https://github.com/${{ github.repository }}/actions)\n"

          echo "üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"$MESSAGE\", \"parse_mode\": \"Markdown\"}"
