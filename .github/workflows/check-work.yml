name: Workflow notify

on:
  schedule:
    - cron: "30 6 * * *"
  workflow_dispatch:

jobs:
  check-failed-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Notify failed runs
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          WORKFLOWS: |
            appGHA|ci-oci.yml
            appGHA|test2.yml
            appGHA|check-wo.yml
            appGHA|tg_notify.yml
            appGHA2|test.yml
        run: |
          set -euo pipefail
          
          # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–µ–π—à–µ–≥–æ HTML-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (<, >, &)
          html_escape() {
            sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g'
          }
          
          declare -A repoReports repoFails
          # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É 24 —á–∞—Å–∞ –Ω–∞–∑–∞–¥ (ISO —Ñ–æ—Ä–º–∞—Ç)
          start=$(date -u -d '24 hours ago' +%Y-%m-%dT%H:%M:%SZ)
          
          # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ WORKFLOWS (—Ñ–æ—Ä–º–∞—Ç: REPO|WORKFLOW)
          while IFS='|' read -r repo workflow; do
            [[ -z "$repo" || -z "$workflow" ]] && continue
            api_url="https://api.github.com/repos/isboston/$repo/actions/workflows/$workflow/runs?per_page=30"
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$api_url")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—É—Å–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–∞ –Ω—É–∂–Ω—ã—Ö –≤–µ—Ç–∫–∞—Ö
            runs=$(echo "$response" | jq --arg start "$start" '[.workflow_runs[]
                      | select(.created_at >= $start and (.head_branch | test("^(main|release/.+|hotfix/.+|develop)$")))]')
            
            # –ü–æ–¥—Å—á—ë—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∏ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤
            fails=$(echo "$runs" | jq '[.[] | select((.conclusion // "failure") | test("failure|failed|error|startup_failure"))] | length')
            succs=$(echo "$runs" | jq '[.[] | select(.conclusion == "success")] | length')
            
            # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ—Ç ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º workflow
            if [[ "$fails" -eq 0 && "$succs" -eq 0 ]]; then
              continue
            fi
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ ‚Äì ‚ùå, –∏–Ω–∞—á–µ ‚úÖ
            status="‚úÖ"
            if [[ "$fails" -gt 0 ]]; then
              status="‚ùå"
              repoFails["$repo"]=$(( repoFails["$repo"] + fails ))
            fi
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—É—Å–∫–æ–≤ –≤ HTML:
            # –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: &#x25FB; <a href="URL">–ù–∞–∑–≤–∞–Ω–∏–µ</a> (–≤–µ—Ç–∫–∞)
            details=$(echo "$runs" | jq -r '.[]
              | "\u25FB <a href=\"" + .html_url + "\">" 
                + (.name[0:29] + (if (.name | length) > 26 then "..." else "" end))
                + "</a> (" + .head_branch + ")"')
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º <br>
            details=$(echo "$details" | paste -sd "<br>" -)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ workflow
            safeWorkflow=$(echo "$workflow" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
            repoReports["$repo"]+="${status} ${safeWorkflow}<br>${details}<br><br>"
          done <<< "$WORKFLOWS"
          
          # –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          result=""
          for repo in "${!repoReports[@]}"; do
            repoEscaped=$(echo "$repo" | html_escape)
            header="üöÄ REPO: ${repoEscaped}"
            if [[ ${repoFails["$repo"]:-0} -gt 0 ]]; then
              header="‚ùå ${repoFails["$repo"]} FAILED | 24h | ${header}"
            fi
            result+="<b>${header}</b><br>${repoReports[$repo]}<br>"
          done
          
          [[ -z "$result" ]] && exit 0
          
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "$(jq -n --arg chat_id "$TELEGRAM_CHAT_ID" --arg text "$result" \
                  '{chat_id: $chat_id, text: $text, parse_mode: "HTML", disable_web_page_preview: true}')"
