name: Workflow notify

on:
  schedule:
    - cron: "30 6 * * *"
  workflow_dispatch:

jobs:
  check-failed-workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Notify failed runs
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          WORKFLOWS: |
            appGHA|ci-oci.yml
            appGHA|test2.yml
            appGHA|check-wo.yml
            appGHA|tg_notify.yml
            appGHA2|test.yml
        run: |
          # Use associative arrays to track statuses and messages
          # Use associative arrays to track statuses and messages
            declare -A REPO_STATUS
            declare -A REPO_COUNT

            while IFS='|' read -r REPO WORKFLOW; do
            [[ -z "$REPO" || -z "$WORKFLOW" ]] && continue
            
            FULL_REPO="isboston/$REPO"
            API_URL="https://api.github.com/repos/$FULL_REPO/actions/workflows/$WORKFLOW/runs?per_page=30"
            
            RESPONSE="$(curl -s -H "Authorization: ***" "$API_URL")"
            
            # Проверим, что поле workflow_runs действительно есть и это массив
            IS_ARRAY=$(echo "$RESPONSE" | jq -r 'if (.workflow_runs | type) == "array" then "yes" else "no" end' 2>/dev/null)
            if [[ "$IS_ARRAY" != "yes" ]]; then
                echo "Error or unexpected JSON from $FULL_REPO/$WORKFLOW:"
                echo "$RESPONSE"
                continue
            fi
            
            # Выбираем только за последние 24 часа, нужные ветки
            RUNS="$(echo "$RESPONSE" | jq --arg start "$(date -u -d '24 hours ago' +%Y-%m-%dT%H:%M:%SZ)" \
                '[.workflow_runs[]
                | select(.created_at >= $start)
                | select(.head_branch | test("^(main|release/.+|hotfix/.+|develop)$")) ]')"

            FAIL_COUNT="$(echo "$RUNS" | jq '[.[] | select((.conclusion? // "failure") | test("failure|failed|error|startup_failure"))] | length')"
            SUCCESS_COUNT="$(echo "$RUNS" | jq '[.[] | select(.conclusion == "success")] | length')"

            if (( FAIL_COUNT > 0 )); then
                STATUS="❌"
            elif (( SUCCESS_COUNT > 0 )); then
                STATUS="✅"
            else
                # Если нет ни фейлов, ни успехов, пропускаем
                continue
            fi

            # Экранируем подчеркивания и формируем строки
            LINES="$(echo "$RUNS" | jq -r '[.[] |
                "\u25FB [\(.name|gsub("_"; "\\_")|.[0:29] + (if .name|length>26 then "..." else "" end))](\(.html_url|gsub("_"; "\\_"))) (\(.head_branch|gsub("_"; "\\_")))"
            ] | join("\n")')"

            REPO_STATUS["$REPO"]+="$STATUS $WORKFLOW\n$LINES\n"
            (( REPO_COUNT["$REPO"] += (FAIL_COUNT>0 ? FAIL_COUNT : 0) ))
            done <<< "$WORKFLOWS"

            RESULT=""
            for REPO in "${!REPO_STATUS[@]}"; do
            COUNT="${REPO_COUNT[$REPO]}"
            HEADER="🚀 REPO: $REPO"
            [[ "$COUNT" -gt 0 ]] && HEADER="❌ $COUNT FAILED | 24h | $HEADER"
            RESULT+="$HEADER\n${REPO_STATUS[$REPO]}\n"
            done

            if [[ -n "$RESULT" ]]; then
            RESULT_ESCAPED="${RESULT//\"/\\\"}"
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                -H "Content-Type: application/json" \
                -d "{\"chat_id\": \"${TELEGRAM_CHAT_ID}\",
                    \"text\": \"$RESULT_ESCAPED\",
                    \"parse_mode\": \"Markdown\",
                    \"disable_web_page_preview\": true}"
            fi
