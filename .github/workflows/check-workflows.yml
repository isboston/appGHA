name: Check Workflows

on:
  schedule:
    - cron: "5 0 * * *"  # –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:05 UTC
  workflow_dispatch:

jobs:
  check-build-results:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ workflow runs –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        run: |
          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
          START_TIME=$(date -u -d "24 hours ago" +"%Y-%m-%dT%H:%M:%SZ")
          END_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º workflow runs —Å $START_TIME –ø–æ $END_TIME"

          # –ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100 –∑–∞–ø—É—Å–∫–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?per_page=100" | \
            jq --arg start "$START_TIME" --arg end "$END_TIME" \
            '[.workflow_runs[] | select(.created_at >= $start and .created_at <= $end)]' > workflow_runs.json

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ workflow run
          CURRENT_RUN_ID="${{ github.run_id }}"
          echo "–ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π workflow run —Å ID $CURRENT_RUN_ID"

          # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π workflow
          jq --arg current_run_id "$CURRENT_RUN_ID" '[.[] | select(.id != ($current_run_id | tonumber))]' workflow_runs.json > filtered_workflow_runs.json

          echo "–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:"
          cat filtered_workflow_runs.json

          # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞ (–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º –∑–∞ –Ω–µ—É–¥–∞—á–Ω—ã–π)
          jq '[.[] | {name: .name, branch: .head_branch, html_url: .html_url, status: (.conclusion // "failure"), triggered_by: (.triggering_actor.login // "unknown"), created_at: .created_at}]' filtered_workflow_runs.json > merged_results.json
          echo "–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:"
          cat merged_results.json

      - name: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ Telegram, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ ! -s merged_results.json ] || [ "$(jq 'length' merged_results.json)" -eq 0 ]; then
            echo "–ó–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–±–æ—Ä–æ–∫."
            exit 0
          fi

          TOTAL=$(jq 'length' merged_results.json)

          LAST_RUN_ID=$(jq '.[0].id' merged_results.json)
          echo "ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—à–µ–Ω–∞: $LAST_RUN_ID"

          # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ —Å–±–æ—Ä–∫–∏
          FAILURES=$(jq '[.[] | select((.status == "failure" or .status == "failed" or .status == "error" or .status == "startup_failure") and .status != "in_progress")]' merged_results.json)
          FAIL_COUNT=$(echo "$FAILURES" | jq 'length')
          
          MESSAGE="üïí Last 24h | üìä Workflows: $TOTAL | ‚ùå Failed: $FAIL_COUNT\n"

          if [ "$FAIL_COUNT" -eq 0 ]; then
            exit 0
          else
            FAIL_LIST=$(echo "$FAILURES" | jq -r $'
              map(
                "üîπ [\(.name | if length > 20 then .[0:20] + \"...\" else . end)](\(.html_url // \"–ù–µ—Ç —Å—Å—ã–ª–∫–∏\")) | üìå \(.branch // \"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ç–∫–∞\") | üë§ \(.triggered_by // \"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π\") | ‚è≥ \(
                  .created_at | fromdateiso8601 | strftime("%s") | tonumber |
                  if . != null then
                    (now - .) |
                    if . < 3600 then
                      ( . / 60 | floor | tostring + "m ago")
                    else
                      ( . / 3600 | floor | tostring + "h ago")
                    end
                  end
                )"
              ) | join("\n")
            ')
            MESSAGE+="$FAIL_LIST"
          fi

          # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"$MESSAGE\", \"parse_mode\": \"Markdown\", \"disable_web_page_preview\": true}"
